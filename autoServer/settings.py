"""
Django settings for autoServer project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8pb^^_nb2(o@ccp$31*p%*ml+^(kyml40huf+dv*bnj=4q8gj3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'platapp',
    'rest_framework',  # django-rf
    'drf_yasg'  # 接口文档

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # csrf验证 3.x的django失效了
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.csrf_middleware.NotUseCsrfTokenMiddlewareMixin',  # 自定义中间件，取消csrf认证
    'tools.middleware.ExceptionChange'  # 自定义middleware，修改错误的返回值
]

ROOT_URLCONF = 'autoServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autoServer.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'autoplatdb',
        'USER': 'root',
        'PASSWORD': '111111',
        # 'PASSWORD': '12345678',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'TEST': {
            'CHARSET': 'utf8',
            'COLLATION': 'utf8_general_ci'
        }
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# rest框架配置
REST_FRAMEWORK = {
    # 默认的渲染器
    'DEFAULT_RENDERER_CLASSES': (
        'utils.renderers.MyRenderer',  # 自定义的渲染器
    ),
    # 异常处理模块
    'EXCEPTION_HANDLER': 'utils.exception.my_exception_handler',
     'DEFAULT_PERMISSION_CLASSES': (
          # 设置访问权限为只读
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
          # 设置访问权限为必须是用户
        'rest_framework.permissions.IsAuthenticated',
                        ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 自上而下的验证，一定要写上面
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # jwt的token 对用户tokne做验证，提取user
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',


    )
}

# 告诉django我用那个user表
AUTH_USER_MODEL = 'platapp.User'

# swagger的配置
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': True,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'authorization'
        }
    },
    # 配置swagger对应的登录和登出的url
    'LOGIN_URL': '/api/account_login/v3',
    'LOGOUT_URL': '/api/logout',
    # 接口文档中方法列表以首字母升序排列
    'APIS_SORTER': 'alpha',
    # 如果支持json提交, 则接口文档中包含json输入框
    'JSON_EDITOR': True,
    # 方法列表字母排序
    'OPERATIONS_SORTER': 'alpha',
    'VALIDATOR_URL': None,
    'DEFAULT_GENERATOR_CLASS': 'rest_framework.schemas.generators.BaseSchemaGenerator'
}

# jwt的配置

import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),  # seconds 300  days   #
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',  # headers中的前缀 JWT  Token Bearer
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'utils.cust_jwt_resposed.jwt_response_payload_handler',
    # 'JWT_RESPONSE_PAYLOAD_ERROR_HANDLER': 'utils.cust_jwt_resposed.jwt_response_payload_error_handler'
}

# 设置未登录的时候重定向的登录url @login_required
LOGIN_URL = '/api/account_login/v3' # 根据你网站的实际登陆地址来设置

